{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport 'react-native-gesture-handler';\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { Asset } from 'expo-asset';\nimport * as Font from 'expo-font';\nimport AppLoading from 'expo-app-loading';\nimport { Root } from \"native-base\";\nimport LogBox from \"react-native-web/dist/exports/LogBox\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport AppPreLoader from \"./application/components/AppPreLoader\";\nimport firebaseConfig from \"./application/utils/Firebase\";\nimport * as firebase from 'firebase';\nfirebase.initializeApp(firebaseConfig);\nimport { RootSiblingParent } from 'react-native-root-siblings';\nimport { NavigationContainer } from '@react-navigation/native';\nimport GuestNavigation from \"./application/navigations/Guest\";\nimport LoggedNavigation from \"./application/navigations/Navigation\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nLogBox.ignoreAllLogs();\n\nvar cacheImages = function cacheImages(images) {\n  return images.map(function (image) {\n    if (typeof image === 'string') {\n      return Image.prefetch(image);\n    } else {\n      return Asset.fromModule(image).downloadAsync();\n    }\n  });\n};\n\nvar loadAssetsAsync = function loadAssetsAsync() {\n  var imageAssets;\n  return _regeneratorRuntime.async(function loadAssetsAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          imageAssets = cacheImages([require(\"./assets/images/header.jpg\"), require(\"./assets/images/logo.png\"), require(\"./assets/images/logo_dark.png\"), require(\"./assets/images/emptylist.png\"), require(\"./assets/images/chef.png\"), require(\"./assets/images/nointernet.png\"), require(\"./assets/images/contact.png\"), require(\"./assets/images/servings.png\"), require(\"./assets/images/calories.png\"), require(\"./assets/images/checked.png\"), require(\"./assets/images/cooktime.png\"), require(\"./assets/images/thumb.png\")]);\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(Promise.all(_toConsumableArray(imageAssets)));\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar App = function App() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLogged = _useState2[0],\n      setIsLogged = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isReady = _useState4[0],\n      setIsReady = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loaded = _useState6[0],\n      setLoaded = _useState6[1];\n\n  useEffect(function () {\n    function checkUser() {\n      return _regeneratorRuntime.async(function checkUser$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(firebase.auth().onAuthStateChanged(function (user) {\n                if (user !== null) {\n                  setIsLogged(true);\n                  setLoaded(true);\n                } else {\n                  setIsLogged(false);\n                  setLoaded(true);\n                }\n              }));\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    checkUser();\n  }, []);\n\n  if (!isReady) {\n    return _jsx(AppLoading, {\n      startAsync: loadAssetsAsync,\n      onFinish: function onFinish() {\n        return setIsReady(true);\n      },\n      onError: console.warn\n    });\n  }\n\n  if (!loaded) {\n    return _jsx(AppPreLoader, {});\n  }\n\n  if (loaded && isReady) {\n    return _jsx(Root, {\n      children: _jsxs(RootSiblingParent, {\n        children: [_jsx(StatusBar, {}), _jsx(NavigationContainer, {\n          children: isLogged ? _jsx(LoggedNavigation, {}) : _jsx(GuestNavigation, {})\n        })]\n      })\n    });\n  }\n};\n\nexport default App;","map":{"version":3,"sources":["/root/home/projects/modern-recipe/App.js"],"names":["React","useState","useEffect","useMemo","Asset","Font","AppLoading","Root","AppPreLoader","firebaseConfig","firebase","initializeApp","RootSiblingParent","NavigationContainer","GuestNavigation","LoggedNavigation","LogBox","ignoreAllLogs","cacheImages","images","map","image","Image","prefetch","fromModule","downloadAsync","loadAssetsAsync","imageAssets","require","Promise","all","App","isLogged","setIsLogged","isReady","setIsReady","loaded","setLoaded","checkUser","auth","onAuthStateChanged","user","console","warn"],"mappings":"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","sourcesContent":["import 'react-native-gesture-handler';\nimport React, {useState, useEffect, useMemo} from 'react';\nimport { Asset } from 'expo-asset';\nimport * as Font from 'expo-font';\nimport AppLoading from 'expo-app-loading';\nimport { Root } from \"native-base\";\nimport { LogBox, StatusBar } from \"react-native\";\nimport AppPreLoader from \"./application/components/AppPreLoader\";\nimport firebaseConfig from './application/utils/Firebase';\nimport * as firebase from 'firebase';\nfirebase.initializeApp(firebaseConfig);\nimport { RootSiblingParent } from 'react-native-root-siblings';\nimport { NavigationContainer } from '@react-navigation/native';\nimport GuestNavigation from './application/navigations/Guest';\nimport LoggedNavigation from './application/navigations/Navigation';\n\nLogBox.ignoreAllLogs();\n\nconst cacheImages = (images) => {\n\n  return images.map(image => {\n    if (typeof image === 'string') {\n      return Image.prefetch(image);\n    } else {\n      return Asset.fromModule(image).downloadAsync();\n    }\n  });\n}\n\n  const loadAssetsAsync = async () => {\n\n    const imageAssets = cacheImages([\n      require('./assets/images/header.jpg'),\n      require('./assets/images/logo.png'),\n      require('./assets/images/logo_dark.png'),\n      require('./assets/images/emptylist.png'),\n      require('./assets/images/chef.png'),\n      require('./assets/images/nointernet.png'),\n      require('./assets/images/contact.png'),\n      require('./assets/images/servings.png'),\n      require('./assets/images/calories.png'),\n      require('./assets/images/checked.png'),\n      require('./assets/images/cooktime.png'),\n      require('./assets/images/thumb.png')\n    ]);\n\n    await Promise.all([...imageAssets]);\n  }\n\nconst App = () => {\n\n  const [isLogged, setIsLogged] = useState(false);\n  const [isReady, setIsReady] = useState(false);\n  const [loaded, setLoaded] = useState(false);\n\n  useEffect(() => {\n\n    async function checkUser() {\n      \n      await firebase.auth().onAuthStateChanged((user) => {\n        if(user !== null) {\n          setIsLogged(true);\n          setLoaded(true);\n    \n        } else {\n          setIsLogged(false);\n          setLoaded(true);\n\n        }\n      })\n    }\n  \n    checkUser();\n  \n  }, []);\n\n    if (!isReady) {\n      return (\n        <AppLoading\n          startAsync={loadAssetsAsync}\n          onFinish={() => setIsReady(true)}\n          onError={console.warn}\n        />\n      );\n    }\n\n    if (!loaded) {\n      return (\n        <AppPreLoader/>\n        );\n    }\n\n    if (loaded && isReady) {\n      return (\n      <Root>\n      <RootSiblingParent>\n      <StatusBar/>\n      <NavigationContainer>\n      {isLogged ? <LoggedNavigation/> : <GuestNavigation/>}\n      </NavigationContainer>\n      </RootSiblingParent>\n      </Root>\n        );\n    }\n\n    };\n\n    export default App;"]},"metadata":{},"sourceType":"module"}