{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { options, Comment } from \"./Comment\";\nimport t from 'tcomb-form-native';\nvar Form = t.form.Form;\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { Button, Text } from 'native-base';\nimport * as firebase from 'firebase';\nimport Strings from \"../utils/Strings\";\nimport { LinearGradient } from 'expo-linear-gradient';\nimport ColorsApp from \"../utils/ColorsApp\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar styles = require(\"../../assets/files/Styles\");\n\nvar ItemForm = function (_Component) {\n  _inherits(ItemForm, _Component);\n\n  var _super = _createSuper(ItemForm);\n\n  function ItemForm(props) {\n    var _this;\n\n    _classCallCheck(this, ItemForm);\n\n    _this = _super.call(this, props);\n    var user = firebase.auth().currentUser;\n    var date = new Date().toDateString();\n    _this.state = {\n      comment: {\n        comment: '',\n        rating: 1,\n        user: user.displayName,\n        date: date\n      }\n    };\n    return _this;\n  }\n\n  _createClass(ItemForm, [{\n    key: \"randomFunction\",\n    value: function randomFunction() {\n      this.props.closeModal();\n    }\n  }, {\n    key: \"addComment\",\n    value: function addComment() {\n      var _this2 = this;\n\n      var user = firebase.auth().currentUser;\n      var date = new Date().toDateString();\n      var validate = this.refs.form.getValue();\n\n      if (validate) {\n        var data = {};\n\n        var comment = _extends({}, validate);\n\n        var ref = firebase.database().ref().child('itemComments');\n        var key = ref.push().key;\n        data[this.props.itemId + \"/\" + key] = comment;\n        ref.update(data).then(function () {\n          _this2.setState(function (prevState, props) {\n            return {\n              comment: {\n                comment: '',\n                rating: 1,\n                user: user.displayName,\n                date: date\n              }\n            };\n          });\n\n          _this2.randomFunction();\n        });\n      }\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(comment) {\n      this.setState({\n        comment: comment\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var comment = this.state.comment;\n      return _jsxs(View, {\n        children: [_jsx(Form, {\n          ref: \"form\",\n          type: Comment,\n          options: options,\n          value: comment,\n          onChange: function onChange(v) {\n            return _this3.onChange(v);\n          }\n        }), _jsx(TouchableOpacity, {\n          onPress: this.addComment.bind(this),\n          activeOpacity: 1,\n          children: _jsx(LinearGradient, {\n            colors: [ColorsApp.SECOND, ColorsApp.PRIMARY],\n            start: [0, 0],\n            end: [1, 0],\n            style: styles.postCommentButton,\n            children: _jsx(Text, {\n              style: styles.postCommentText,\n              children: Strings.ST61.toUpperCase()\n            })\n          })\n        })]\n      });\n    }\n  }]);\n\n  return ItemForm;\n}(Component);\n\nexport { ItemForm as default };","map":{"version":3,"sources":["/root/home/projects/modern-recipe/application/forms/ItemForm.js"],"names":["React","Component","options","Comment","t","Form","form","Button","Text","firebase","Strings","LinearGradient","ColorsApp","styles","require","ItemForm","props","user","auth","currentUser","date","Date","toDateString","state","comment","rating","displayName","closeModal","validate","refs","getValue","data","ref","database","child","key","push","itemId","update","then","setState","prevState","randomFunction","v","onChange","addComment","bind","SECOND","PRIMARY","postCommentButton","postCommentText","ST61","toUpperCase"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,OAAR,EAAiBC,OAAjB;AACA,OAAOC,CAAP,MAAc,mBAAd;AACA,IAAMC,IAAI,GAAGD,CAAC,CAACE,IAAF,CAAOD,IAApB;;;AAEA,SAAQE,MAAR,EAAgBC,IAAhB,QAA2B,aAA3B;AACA,OAAO,KAAKC,QAAZ,MAA0B,UAA1B;AACA,OAAOC,OAAP;AAEA,SAASC,cAAT,QAA+B,sBAA/B;AACA,OAAOC,SAAP;;;;AAEA,IAAIC,MAAM,GAAGC,OAAO,6BAApB;;IAEqBC,Q;;;;;AACpB,oBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AAClB,8BAAMA,KAAN;AACA,QAAIC,IAAI,GAAGR,QAAQ,CAACS,IAAT,GAAgBC,WAA3B;AACE,QAAIC,IAAI,GAAG,IAAIC,IAAJ,GAAWC,YAAX,EAAX;AAEF,UAAKC,KAAL,GAAa;AACZC,MAAAA,OAAO,EAAE;AACRA,QAAAA,OAAO,EAAE,EADD;AAERC,QAAAA,MAAM,EAAE,CAFA;AAGRR,QAAAA,IAAI,EAAEA,IAAI,CAACS,WAHH;AAIRN,QAAAA,IAAI,EAAEA;AAJE;AADG,KAAb;AALkB;AAalB;;;;WAED,0BAAiB;AACV,WAAKJ,KAAL,CAAWW,UAAX;AACH;;;WAEJ,sBAAc;AAAA;;AACb,UAAIV,IAAI,GAAGR,QAAQ,CAACS,IAAT,GAAgBC,WAA3B;AACE,UAAIC,IAAI,GAAG,IAAIC,IAAJ,GAAWC,YAAX,EAAX;AAEF,UAAMM,QAAQ,GAAG,KAAKC,IAAL,CAAUvB,IAAV,CAAewB,QAAf,EAAjB;;AACA,UAAGF,QAAH,EAAa;AACZ,YAAIG,IAAI,GAAG,EAAX;;AACA,YAAIP,OAAO,GAAG,SAAc,EAAd,EAAkBI,QAAlB,CAAd;;AACA,YAAII,GAAG,GAAGvB,QAAQ,CAACwB,QAAT,GAAoBD,GAApB,GAA0BE,KAA1B,CAAgC,cAAhC,CAAV;AACA,YAAMC,GAAG,GAAGH,GAAG,CAACI,IAAJ,GAAWD,GAAvB;AAEAJ,QAAAA,IAAI,CAAI,KAAKf,KAAL,CAAWqB,MAAf,SAAyBF,GAAzB,CAAJ,GAAsCX,OAAtC;AAEAQ,QAAAA,GAAG,CAACM,MAAJ,CAAWP,IAAX,EAAiBQ,IAAjB,CAAsB,YAAM;AAC3B,UAAA,MAAI,CAACC,QAAL,CAAc,UAACC,SAAD,EAAYzB,KAAZ,EAAsB;AACnC,mBAAO;AACNQ,cAAAA,OAAO,EAAE;AACRA,gBAAAA,OAAO,EAAE,EADD;AAERC,gBAAAA,MAAM,EAAE,CAFA;AAGRR,gBAAAA,IAAI,EAAEA,IAAI,CAACS,WAHH;AAIRN,gBAAAA,IAAI,EAAEA;AAJE;AADH,aAAP;AASA,WAVD;;AAYA,UAAA,MAAI,CAACsB,cAAL;AAGA,SAhBD;AAmBA;AAGD;;;WAED,kBAAUlB,OAAV,EAAmB;AAClB,WAAKgB,QAAL,CAAc;AAAChB,QAAAA,OAAO,EAAPA;AAAD,OAAd;AACA;;;WAED,kBAAU;AAAA;;AACT,UAAOA,OAAP,GAAkB,KAAKD,KAAvB,CAAOC,OAAP;AACA,aACG,MAAC,IAAD;AAAA,mBACA,KAAC,IAAD;AACC,UAAA,GAAG,EAAC,MADL;AAEC,UAAA,IAAI,EAAErB,OAFP;AAGC,UAAA,OAAO,EAAED,OAHV;AAIC,UAAA,KAAK,EAAEsB,OAJR;AAKC,UAAA,QAAQ,EAAE,kBAACmB,CAAD;AAAA,mBAAO,MAAI,CAACC,QAAL,CAAcD,CAAd,CAAP;AAAA;AALX,UADA,EAQD,KAAC,gBAAD;AAAkB,UAAA,OAAO,EAAE,KAAKE,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAA3B;AAAuD,UAAA,aAAa,EAAE,CAAtE;AAAA,oBACA,KAAC,cAAD;AAAgB,YAAA,MAAM,EAAE,CAAClC,SAAS,CAACmC,MAAX,EAAmBnC,SAAS,CAACoC,OAA7B,CAAxB;AAA+D,YAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,CAAtE;AAA8E,YAAA,GAAG,EAAE,CAAC,CAAD,EAAI,CAAJ,CAAnF;AAA2F,YAAA,KAAK,EAAEnC,MAAM,CAACoC,iBAAzG;AAAA,sBACA,KAAC,IAAD;AAAM,cAAA,KAAK,EAAEpC,MAAM,CAACqC,eAApB;AAAA,wBAAsCxC,OAAO,CAACyC,IAAR,CAAaC,WAAb;AAAtC;AADA;AADA,UARC;AAAA,QADH;AAmBA;;;;EAlFoCnD,S;;SAAjBc,Q","sourcesContent":["import React, {Component} from 'react';\nimport {options, Comment} from './Comment';\nimport t from 'tcomb-form-native';\nconst Form = t.form.Form;\nimport {View, TouchableOpacity} from \"react-native\";\nimport {Button, Text} from 'native-base';\nimport * as firebase from 'firebase';\nimport Strings from '../utils/Strings';\n\nimport { LinearGradient } from 'expo-linear-gradient';\nimport ColorsApp from '../utils/ColorsApp';\n\nvar styles = require('../../assets/files/Styles');\n\nexport default class ItemForm extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tvar user = firebase.auth().currentUser;\n  \t\tvar date = new Date().toDateString();\n\n\t\tthis.state = {\n\t\t\tcomment: {\n\t\t\t\tcomment: '',\n\t\t\t\trating: 1,\n\t\t\t\tuser: user.displayName,\n\t\t\t\tdate: date\n\t\t\t}\n\t\t};\n\t}\n\n\trandomFunction() {\n        this.props.closeModal();\n    }\n\n\taddComment () {\n\t\tvar user = firebase.auth().currentUser;\n  \t\tvar date = new Date().toDateString();\n\n\t\tconst validate = this.refs.form.getValue();\n\t\tif(validate) {\n\t\t\tlet data = {};\n\t\t\tlet comment = Object.assign({}, validate);\n\t\t\tlet ref = firebase.database().ref().child('itemComments');\n\t\t\tconst key = ref.push().key;\n\n\t\t\tdata[`${this.props.itemId}/${key}`] = comment;\n\n\t\t\tref.update(data).then(() => {\n\t\t\t\tthis.setState((prevState, props) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tcomment: {\n\t\t\t\t\t\t\tcomment: '',\n\t\t\t\t\t\t\trating: 1,\n\t\t\t\t\t\t\tuser: user.displayName,\n\t\t\t\t\t\t\tdate: date\n\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tthis.randomFunction();\n\t\t\t\t\n\n\t\t\t})\n\n\n\t\t}\n\n\t\t\n\t}\n\n\tonChange (comment) {\n\t\tthis.setState({comment});\n\t}\n\n\trender () {\n\t\tconst {comment} = this.state;\n\t\treturn (\n\t\t\t\t\t<View>\n\t\t\t\t\t<Form\n\t\t\t\t\t\tref=\"form\"\n\t\t\t\t\t\ttype={Comment}\n\t\t\t\t\t\toptions={options}\n\t\t\t\t\t\tvalue={comment}\n\t\t\t\t\t\tonChange={(v) => this.onChange(v)}\n\t\t\t\t\t/>\n\t\t\t\t<TouchableOpacity onPress={this.addComment.bind(this)} activeOpacity={1}>\n\t\t\t\t<LinearGradient colors={[ColorsApp.SECOND, ColorsApp.PRIMARY]} start={[0, 0]} end={[1, 0]} style={styles.postCommentButton}>\n\t\t\t\t<Text style={styles.postCommentText}>{Strings.ST61.toUpperCase()}</Text>\n\t\t\t\t</LinearGradient>\n\t\t\t\t</TouchableOpacity>\n\n\t\t\t\t</View>\n\n\n\t\t)\n\t}\n}"]},"metadata":{},"sourceType":"module"}