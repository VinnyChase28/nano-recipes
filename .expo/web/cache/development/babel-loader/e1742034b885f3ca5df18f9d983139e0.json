{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport AppPreLoader from \"../components/AppPreLoader\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport View from \"react-native-web/dist/exports/View\";\nimport * as firebase from 'firebase';\nimport CommentEmpty from \"./CommentEmpty\";\nimport CommentList from \"../components/CommentList\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar ItemComments = function (_Component) {\n  _inherits(ItemComments, _Component);\n\n  var _super = _createSuper(ItemComments);\n\n  function ItemComments() {\n    var _this;\n\n    _classCallCheck(this, ItemComments);\n\n    _this = _super.call(this);\n    _this.state = {\n      comments: [],\n      loaded: false\n    };\n    return _this;\n  }\n\n  _createClass(ItemComments, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      firebase.database().ref(\"itemComments/\" + this.props.itemId).on('value', function (snapshot) {\n        var comments = [];\n        snapshot.forEach(function (row) {\n          comments.push({\n            id: row.key,\n            rating: row.val().rating,\n            comment: row.val().comment,\n            user: row.val().user,\n            date: row.val().date\n          });\n        });\n\n        _this2.setState({\n          comments: comments,\n          loaded: true\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$state = this.state,\n          comments = _this$state.comments,\n          loaded = _this$state.loaded;\n\n      if (!loaded) {\n        return _jsx(AppPreLoader, {});\n      }\n\n      if (!comments.length) {\n        return _jsx(CommentEmpty, {});\n      }\n\n      return _jsx(View, {\n        style: {\n          marginTop: 5,\n          marginBottom: 15\n        },\n        children: _jsx(FlatList, {\n          data: comments,\n          renderItem: function renderItem(data) {\n            return _this3.renderComment(data.item);\n          },\n          keyExtractor: function keyExtractor(data) {\n            return data.id;\n          }\n        })\n      });\n    }\n  }, {\n    key: \"renderComment\",\n    value: function renderComment(comment) {\n      return _jsx(CommentList, {\n        comment: comment\n      });\n    }\n  }]);\n\n  return ItemComments;\n}(Component);\n\nexport { ItemComments as default };","map":{"version":3,"sources":["/root/home/projects/modern-recipe/application/forms/ItemComments.js"],"names":["React","Component","AppPreLoader","firebase","CommentEmpty","CommentList","ItemComments","state","comments","loaded","database","ref","props","itemId","on","snapshot","forEach","row","push","id","key","rating","val","comment","user","date","setState","length","marginTop","marginBottom","data","renderComment","item"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,YAAP;;;;AAEA,OAAO,KAAKC,QAAZ,MAA0B,UAA1B;AACA,OAAOC,YAAP;AACA,OAAOC,WAAP;;;IAEqBC,Y;;;;;AACpB,0BAAe;AAAA;;AAAA;;AACd;AACA,UAAKC,KAAL,GAAa;AACZC,MAAAA,QAAQ,EAAE,EADE;AAEZC,MAAAA,MAAM,EAAE;AAFI,KAAb;AAFc;AAMd;;;;WAED,6BAAqB;AAAA;;AACpBN,MAAAA,QAAQ,CAACO,QAAT,GAAoBC,GAApB,mBAAwC,KAAKC,KAAL,CAAWC,MAAnD,EAA6DC,EAA7D,CAAgE,OAAhE,EAAyE,UAAAC,QAAQ,EAAI;AACpF,YAAIP,QAAQ,GAAG,EAAf;AACAO,QAAAA,QAAQ,CAACC,OAAT,CAAiB,UAAAC,GAAG,EAAI;AACvBT,UAAAA,QAAQ,CAACU,IAAT,CAAc;AACbC,YAAAA,EAAE,EAAEF,GAAG,CAACG,GADK;AAEbC,YAAAA,MAAM,EAAEJ,GAAG,CAACK,GAAJ,GAAUD,MAFL;AAGbE,YAAAA,OAAO,EAAEN,GAAG,CAACK,GAAJ,GAAUC,OAHN;AAIbC,YAAAA,IAAI,EAAEP,GAAG,CAACK,GAAJ,GAAUE,IAJH;AAKbC,YAAAA,IAAI,EAAER,GAAG,CAACK,GAAJ,GAAUG;AALH,WAAd;AAQA,SATD;;AAUA,QAAA,MAAI,CAACC,QAAL,CAAc;AACblB,UAAAA,QAAQ,EAARA,QADa;AAEbC,UAAAA,MAAM,EAAE;AAFK,SAAd;AAIA,OAhBD;AAiBA;;;WAED,kBAAU;AAAA;;AACT,wBAA2B,KAAKF,KAAhC;AAAA,UAAOC,QAAP,eAAOA,QAAP;AAAA,UAAiBC,MAAjB,eAAiBA,MAAjB;;AAEA,UAAI,CAAEA,MAAN,EAAc;AACb,eAAO,KAAC,YAAD,KAAP;AACA;;AAED,UAAI,CAAED,QAAQ,CAACmB,MAAf,EAAuB;AACtB,eAAO,KAAC,YAAD,KAAP;AACA;;AAED,aACC,KAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACC,UAAAA,SAAS,EAAE,CAAZ;AAAeC,UAAAA,YAAY,EAAE;AAA7B,SAAb;AAAA,kBACC,KAAC,QAAD;AACE,UAAA,IAAI,EAAErB,QADR;AAEE,UAAA,UAAU,EAAE,oBAACsB,IAAD;AAAA,mBAAU,MAAI,CAACC,aAAL,CAAmBD,IAAI,CAACE,IAAxB,CAAV;AAAA,WAFd;AAGE,UAAA,YAAY,EAAE,sBAACF,IAAD;AAAA,mBAAUA,IAAI,CAACX,EAAf;AAAA;AAHhB;AADD,QADD;AASA;;;WAED,uBAAcI,OAAd,EAAuB;AACtB,aACC,KAAC,WAAD;AAAa,QAAA,OAAO,EAAEA;AAAtB,QADD;AAGA;;;;EAvDwCtB,S;;SAArBK,Y","sourcesContent":["import React, {Component} from 'react';\nimport AppPreLoader from \"../components/AppPreLoader\";\nimport {StyleSheet, FlatList, View} from 'react-native';\nimport * as firebase from 'firebase';\nimport CommentEmpty from \"./CommentEmpty\";\nimport CommentList from \"../components/CommentList\";\n\nexport default class ItemComments extends Component {\n\tconstructor () {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tcomments: [],\n\t\t\tloaded: false\n\t\t};\n\t}\n\n\tcomponentDidMount () {\n\t\tfirebase.database().ref(`itemComments/${this.props.itemId}`).on('value', snapshot => {\n\t\t\tlet comments = [];\n\t\t\tsnapshot.forEach(row => {\n\t\t\t\tcomments.push({\n\t\t\t\t\tid: row.key,\n\t\t\t\t\trating: row.val().rating,\n\t\t\t\t\tcomment: row.val().comment,\n\t\t\t\t\tuser: row.val().user,\n\t\t\t\t\tdate: row.val().date,\n\n\t\t\t\t});\n\t\t\t});\n\t\t\tthis.setState({\n\t\t\t\tcomments,\n\t\t\t\tloaded: true\n\t\t\t});\n\t\t})\n\t}\n\n\trender () {\n\t\tconst {comments, loaded} = this.state;\n\n\t\tif( ! loaded) {\n\t\t\treturn(<AppPreLoader/>);\n\t\t}\n\n\t\tif( ! comments.length) {\n\t\t\treturn <CommentEmpty/>\n\t\t}\n\n\t\treturn (\n\t\t\t<View style={{marginTop: 5, marginBottom: 15}}>\n\t\t\t\t<FlatList\n\t\t\t\t\t\tdata={comments}\n\t\t\t\t\t\trenderItem={(data) => this.renderComment(data.item)}\n\t\t\t\t\t\tkeyExtractor={(data) => data.id}\n\t\t\t\t\t/>\n\t\t\t</View>\n\t\t);\n\t}\n\n\trenderComment(comment) {\n\t\treturn (\n\t\t\t<CommentList comment={comment}/>\n\t\t)\n\t}\n}"]},"metadata":{},"sourceType":"module"}