{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { PermissionStatus, createPermissionHook, UnavailabilityError } from 'expo-modules-core';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ExpoAdsAdMob from \"./ExpoAdsAdMob\";\nexport { PermissionStatus };\nvar androidPermissionsResponse = {\n  granted: true,\n  expires: 'never',\n  canAskAgain: true,\n  status: PermissionStatus.GRANTED\n};\nexport function requestPermissionsAsync() {\n  return _regeneratorRuntime.async(function requestPermissionsAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!(Platform.OS === 'android')) {\n            _context.next = 2;\n            break;\n          }\n\n          return _context.abrupt(\"return\", Promise.resolve(androidPermissionsResponse));\n\n        case 2:\n          if (ExpoAdsAdMob.requestPermissionsAsync) {\n            _context.next = 4;\n            break;\n          }\n\n          throw new UnavailabilityError('AdMod', 'requestPermissionsAsync');\n\n        case 4:\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(ExpoAdsAdMob.requestPermissionsAsync());\n\n        case 6:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getPermissionsAsync() {\n  return _regeneratorRuntime.async(function getPermissionsAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!(Platform.OS === 'android')) {\n            _context2.next = 2;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", Promise.resolve(androidPermissionsResponse));\n\n        case 2:\n          if (ExpoAdsAdMob.getPermissionsAsync) {\n            _context2.next = 4;\n            break;\n          }\n\n          throw new UnavailabilityError('AdMod', 'getPermissionsAsync');\n\n        case 4:\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(ExpoAdsAdMob.getPermissionsAsync());\n\n        case 6:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport var usePermissions = createPermissionHook({\n  getMethod: getPermissionsAsync,\n  requestMethod: requestPermissionsAsync\n});\nexport function isAvailableAsync() {\n  return _regeneratorRuntime.async(function isAvailableAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          return _context3.abrupt(\"return\", !!ExpoAdsAdMob.setTestDeviceIDAsync);\n\n        case 1:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function setTestDeviceIDAsync(testDeviceID) {\n  return _regeneratorRuntime.async(function setTestDeviceIDAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          if (ExpoAdsAdMob.setTestDeviceIDAsync) {\n            _context4.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-ads-admob', 'setTestDeviceIDAsync');\n\n        case 2:\n          _context4.next = 4;\n          return _regeneratorRuntime.awrap(ExpoAdsAdMob.setTestDeviceIDAsync(testDeviceID || ''));\n\n        case 4:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../src/AdMob.ts"],"names":[],"mappings":";AAAA,SAEE,gBAFF,EAKE,oBALF,EAME,mBANF,QAOO,mBAPP;;AAUA,OAAO,YAAP;AAEA,SAA6B,gBAA7B;AAEA,IAAM,0BAA0B,GAAuB;AACrD,EAAA,OAAO,EAAE,IAD4C;AAErD,EAAA,OAAO,EAAE,OAF4C;AAGrD,EAAA,WAAW,EAAE,IAHwC;AAIrD,EAAA,MAAM,EAAE,gBAAgB,CAAC;AAJ4B,CAAvD;AAOA,OAAO,SAAe,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA,gBACD,QAAQ,CAAC,EAAT,KAAgB,SADf;AAAA;AAAA;AAAA;;AAAA,2CAEI,OAAO,CAAC,OAAR,CAAgB,0BAAhB,CAFJ;;AAAA;AAAA,cAKA,YAAY,CAAC,uBALb;AAAA;AAAA;AAAA;;AAAA,gBAMG,IAAI,mBAAJ,CAAwB,OAAxB,EAAiC,yBAAjC,CANH;;AAAA;AAAA;AAAA,2CAQQ,YAAY,CAAC,uBAAb,EARR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWP,OAAO,SAAe,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA,gBACD,QAAQ,CAAC,EAAT,KAAgB,SADf;AAAA;AAAA;AAAA;;AAAA,4CAEI,OAAO,CAAC,OAAR,CAAgB,0BAAhB,CAFJ;;AAAA;AAAA,cAKA,YAAY,CAAC,mBALb;AAAA;AAAA;AAAA;;AAAA,gBAMG,IAAI,mBAAJ,CAAwB,OAAxB,EAAiC,qBAAjC,CANH;;AAAA;AAAA;AAAA,2CAQQ,YAAY,CAAC,mBAAb,EARR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBP,OAAO,IAAM,cAAc,GAAG,oBAAoB,CAAC;AACjD,EAAA,SAAS,EAAE,mBADsC;AAEjD,EAAA,aAAa,EAAE;AAFkC,CAAD,CAA3C;AAUP,OAAO,SAAe,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA,4CACE,CAAC,CAAC,YAAY,CAAC,oBADjB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIP,OAAO,SAAe,oBAAf,CAAoC,YAApC;AAAA;AAAA;AAAA;AAAA;AAAA,cACA,YAAY,CAAC,oBADb;AAAA;AAAA;AAAA;;AAAA,gBAEG,IAAI,mBAAJ,CAAwB,gBAAxB,EAA0C,sBAA1C,CAFH;;AAAA;AAAA;AAAA,2CAIC,YAAY,CAAC,oBAAb,CAAkC,YAAY,IAAI,EAAlD,CAJD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {\n  PermissionResponse,\n  PermissionStatus,\n  PermissionExpiration,\n  PermissionHookOptions,\n  createPermissionHook,\n  UnavailabilityError,\n} from 'expo-modules-core';\nimport { Platform } from 'react-native';\n\nimport ExpoAdsAdMob from './ExpoAdsAdMob';\n\nexport { PermissionResponse, PermissionStatus, PermissionExpiration, PermissionHookOptions };\n\nconst androidPermissionsResponse: PermissionResponse = {\n  granted: true,\n  expires: 'never',\n  canAskAgain: true,\n  status: PermissionStatus.GRANTED,\n};\n\nexport async function requestPermissionsAsync(): Promise<PermissionResponse> {\n  if (Platform.OS === 'android') {\n    return Promise.resolve(androidPermissionsResponse);\n  }\n\n  if (!ExpoAdsAdMob.requestPermissionsAsync) {\n    throw new UnavailabilityError('AdMod', 'requestPermissionsAsync');\n  }\n  return await ExpoAdsAdMob.requestPermissionsAsync();\n}\n\nexport async function getPermissionsAsync(): Promise<PermissionResponse> {\n  if (Platform.OS === 'android') {\n    return Promise.resolve(androidPermissionsResponse);\n  }\n\n  if (!ExpoAdsAdMob.getPermissionsAsync) {\n    throw new UnavailabilityError('AdMod', 'getPermissionsAsync');\n  }\n  return await ExpoAdsAdMob.getPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Check or request permissions for AdMob.\n * This uses both `requestPermissionAsync` and `getPermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = AdsAdMob.usePermission();\n * ```\n */\nexport const usePermissions = createPermissionHook({\n  getMethod: getPermissionsAsync,\n  requestMethod: requestPermissionsAsync,\n});\n\n/**\n * Returns whether the AdMob API is enabled on the current device. This does not check the native configuration.\n *\n * @returns Async `boolean`, indicating whether the AdMob API is available on the current device. Currently this resolves `true` on iOS and Android only.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  return !!ExpoAdsAdMob.setTestDeviceIDAsync;\n}\n\nexport async function setTestDeviceIDAsync(testDeviceID: string | null): Promise<void> {\n  if (!ExpoAdsAdMob.setTestDeviceIDAsync) {\n    throw new UnavailabilityError('expo-ads-admob', 'setTestDeviceIDAsync');\n  }\n  await ExpoAdsAdMob.setTestDeviceIDAsync(testDeviceID || '');\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}